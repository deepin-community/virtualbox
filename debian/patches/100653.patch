Index: virtualbox/src/VBox/Additions/linux/drm/vbox_drv.h
===================================================================
--- virtualbox.orig/src/VBox/Additions/linux/drm/vbox_drv.h
+++ virtualbox/src/VBox/Additions/linux/drm/vbox_drv.h
@@ -172,7 +172,7 @@
 # include <drm/drm_gem.h>
 #endif
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # include <drm/ttm/ttm_bo.h>
 #else
 # include <drm/ttm/ttm_bo_api.h>
@@ -249,7 +249,7 @@
 /** Field "num_pages" of struct ttm_resource was renamed to "size" in 6.2 and
  * now represents number of bytes. This macro handles this change. Input
  * argument is a pointer to struct ttm_resource. */
-#if RTLNX_VER_MIN(6,2,0)
+#if RTLNX_VER_MIN(6,2,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # define VBOX_BO_RESOURCE_NUM_PAGES(_resource) PFN_UP(_resource->size)
 #else
 # define VBOX_BO_RESOURCE_NUM_PAGES(_resource) _resource->num_pages
Index: virtualbox/src/VBox/Additions/linux/drm/vbox_fb.c
===================================================================
--- virtualbox.orig/src/VBox/Additions/linux/drm/vbox_fb.c
+++ virtualbox/src/VBox/Additions/linux/drm/vbox_fb.c
@@ -50,7 +50,7 @@
 
 #include <VBoxVideo.h>
 
-#if RTLNX_VER_MIN(6,2,0)
+#if RTLNX_VER_MIN(6,2,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # define VBOX_FBDEV_INFO(_helper) _helper.info
 #else
 # define VBOX_FBDEV_INFO(_helper) _helper.fbdev
@@ -325,7 +325,7 @@
 		return ret;
 	}
 
-#if RTLNX_VER_MIN(6,2,0)
+#if RTLNX_VER_MIN(6,2,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	info = drm_fb_helper_alloc_info(helper);
 #else
 	info = drm_fb_helper_alloc_fbi(helper);
@@ -349,7 +349,7 @@
 	info->flags = FBINFO_DEFAULT | FBINFO_MISC_ALWAYS_SETPAR;
 	info->fbops = &vboxfb_ops;
 
-#if RTLNX_VER_MAX(6,3,0)
+#if RTLNX_VER_MAX(6,3,0) && !RTLNX_RHEL_MAJ_PREREQ(9,3)
 	/*
 	 * This seems to be done for safety checking that the framebuffer
 	 * is not registered twice by different drivers.
@@ -378,7 +378,7 @@
 	info->screen_size = size;
 
 #ifdef CONFIG_FB_DEFERRED_IO
-# if RTLNX_VER_MIN(5,19,0) || RTLNX_RHEL_RANGE(8,8, 8,99)
+# if RTLNX_VER_MIN(5,19,0) || RTLNX_RHEL_RANGE(8,8, 8,99) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	info->fix.smem_len = info->screen_size;
 # endif
 	info->fbdefio = &vbox_defio;
@@ -415,7 +415,7 @@
 		fb_deferred_io_cleanup(VBOX_FBDEV_INFO(fbdev->helper));
 #endif
 
-#if RTLNX_VER_MIN(6,2,0)
+#if RTLNX_VER_MIN(6,2,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	drm_fb_helper_unregister_info(&fbdev->helper);
 #else
 	drm_fb_helper_unregister_fbi(&fbdev->helper);
@@ -463,7 +463,7 @@
 	vbox->fbdev = fbdev;
 	spin_lock_init(&fbdev->dirty_lock);
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	drm_fb_helper_prepare(dev, &fbdev->helper, 32, &vbox_fb_helper_funcs);
 #elif RTLNX_VER_MIN(3,17,0) || RTLNX_RHEL_MIN(7,2)
 	drm_fb_helper_prepare(dev, &fbdev->helper, &vbox_fb_helper_funcs);
@@ -492,7 +492,7 @@
 	/* disable all the possible outputs/crtcs before entering KMS mode */
 	drm_helper_disable_unused_functions(dev);
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	ret = drm_fb_helper_initial_config(&fbdev->helper);
 #else
 	ret = drm_fb_helper_initial_config(&fbdev->helper, 32);
@@ -511,7 +511,7 @@
 {
 	struct fb_info *fbdev = VBOX_FBDEV_INFO(vbox->fbdev->helper);
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
     fbdev->fix.smem_start =
 pci_resource_start(VBOX_DRM_TO_PCI_DEV(vbox->fbdev->helper.dev), 0) + gpu_addr;
 #else
Index: virtualbox/src/VBox/Additions/linux/drm/vbox_main.c
===================================================================
--- virtualbox.orig/src/VBox/Additions/linux/drm/vbox_main.c
+++ virtualbox/src/VBox/Additions/linux/drm/vbox_main.c
@@ -36,7 +36,7 @@
 #include <drm/drm_fb_helper.h>
 #include <drm/drm_crtc_helper.h>
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # include <drm/drm_modeset_helper.h>
 #endif
 
Index: virtualbox/src/VBox/Additions/linux/drm/vbox_mode.c
===================================================================
--- virtualbox.orig/src/VBox/Additions/linux/drm/vbox_mode.c
+++ virtualbox/src/VBox/Additions/linux/drm/vbox_mode.c
@@ -39,7 +39,7 @@
 #include "vbox_drv.h"
 #include <linux/export.h>
 #include <drm/drm_crtc_helper.h>
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # include <drm/drm_modeset_helper_vtables.h>
 # include <drm/drm_modeset_helper.h>
 #endif
@@ -316,6 +316,7 @@
 	if (rc)
 		return rc;
 
+        mutex_lock(&vbox->hw_mutex);
 	vbox_do_modeset(crtc, &crtc->mode);
 	mutex_unlock(&vbox->hw_mutex);
 
Index: virtualbox/src/VBox/Additions/linux/drm/vbox_ttm.c
===================================================================
--- virtualbox.orig/src/VBox/Additions/linux/drm/vbox_ttm.c
+++ virtualbox/src/VBox/Additions/linux/drm/vbox_ttm.c
@@ -34,7 +34,7 @@
  */
 #include "vbox_drv.h"
 
-#if RTLNX_VER_MIN(6,3,0)
+#if RTLNX_VER_MIN(6,3,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 # include <drm/ttm/ttm_tt.h>
 #endif
 
@@ -628,7 +628,7 @@
 	drm_vma_node_reset(&vboxbo->bo.base.vma_node);
 #endif
 
-#if RTLNX_VER_MIN(6,1,0)
+#if RTLNX_VER_MIN(6,1,0) || RTLNX_RHEL_MAJ_PREREQ(9,3)
 	ret = ttm_bo_init_validate(&vbox->ttm.bdev, &vboxbo->bo,
 #else
 	ret = ttm_bo_init(&vbox->ttm.bdev, &vboxbo->bo, size,
